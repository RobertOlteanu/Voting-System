#include <Keypad.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <SPI.h>
#include <MFRC522.h>
#include <EEPROM.h>

#define SS_PIN 53
#define RST_PIN 12
#define eeprom EEPROM

// MFRC-522
MFRC522 mfrc522(SS_PIN,RST_PIN);
byte card_pin[4];
int idx_eeprom = 0;
bool getID()
{
   if(mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial())
   {
      mfrc522.PICC_HaltA(); // Citesc doar UID
      return true;
   }
   return false;
}

// LCD-I2C
LiquidCrystal_I2C lcd(0x27,16,2);
void vote_error()
{
    lcd.clear();
    lcd.print("Nu exista");lcd.setCursor(0,1);
    lcd.print("optiunea !");
    delay(3000);
    lcd.clear();
    lcd.print("Votati ");
}

// KEYPAD
const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = {11, 10, 9, 8}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {7, 6, 5, 4}; //connect to the column pinouts of the keypad

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

// Global Variables
char v_options = -1;
char c_options = -1;
char keyp;
int votes[4];

void setup()
{
   // Init components
   Serial.begin(9600);
   lcd.init();
   lcd.backlight();
   lcd.clear();

   SPI.begin();            // Init SPI bus
   mfrc522.PCD_Init(); // Init MFRC522 card

   /* Configurations */
   // Optiuni de vot
   err_opt_1:lcd.print("Optiuni de vot ");
   while(!(v_options = keypad.getKey()));
   if(v_options < '2' || v_options > '4')
   {
      lcd.clear();
      lcd.print("Eroare !"); lcd.setCursor(0,1);
      lcd.print("Minim 2 Maxim 4");
      v_options = 0;
      delay(3000);
      lcd.clear();
      goto err_opt_1;
   }
   lcd.print(v_options);
   delay(3000);
   err_one_pers:lcd.clear();
   
   // Persoane + Numar carduri
   char tmp = -1;
   boolean setted = true;
   err_opt_2:lcd.print("Nr. Persoane: ");
   err_opt_21:while(1)
   {
     c_options = keypad.getKey();
     if(tmp && !c_options && !setted)
     {
        lcd.print("Nr. Persoane: ");
        lcd.print(tmp);
        setted = true;
     }
     if(tmp == -1)
     {
       if(c_options == '*' || c_options == '#' || c_options >= 'A')
       {
          lcd.clear();
          lcd.print("Doar numere !");
          delay(3000);
          lcd.clear();
          goto err_opt_2;
       }
       else if(!c_options) goto err_opt_21;
       else if(c_options >= '0' && c_options <= '9')
       {
          tmp = c_options;
          lcd.print(c_options);
          lcd.setCursor(0,1);
          lcd.print("'*' pt. ENTER");
          lcd.setCursor(15,0);
       }
     }
     else if(c_options)
     {
        if(c_options == '*')
        {
          delay(3000);
          lcd.clear();
          break;
        }
        else if(c_options == '#' || c_options >= 'A')
        {
          lcd.clear();
          lcd.print("Doar numere !");
          delay(3000);
          lcd.clear();
          setted = false;
          goto err_opt_21;
        }
        else
        {
          lcd.print(c_options);
          delay(3000);
          lcd.clear();
          break;
        }
     }
   }
   if(c_options == '*') c_options = tmp - '0';
   else c_options = (tmp-'0')*10 + c_options - '0';
   if(c_options < 2 || c_options > 64)
   {
     lcd.clear();
     lcd.print("Minim 2 persoane"); lcd.setCursor(0,1);
     lcd.print("Maxim 64");
     delay(3000);
     goto err_one_pers;
   }
   
   // Inregistrare card in EEPROM (Baza de date)
   // Incep sa adaug cardurile in memorie incepand de la indexul 0, pentru a putea tine evidenta
   bool readed = false;
   char pin[4];
   for(int i = 0; i < c_options; i++)
   {
      pin[0] = pin[1] = pin[2] = pin[3] = -1;
      do{
        lcd.clear();
        lcd.print("Apropiati cardul"); lcd.setCursor(0,1);
        lcd.print("pentru citire");
        delay(500);
        readed = getID();
        if(readed)
        {
          for(int k = 0; k < idx_eeprom; k+= 8)
          {
            if(   mfrc522.uid.uidByte[0] == int(eeprom.read(k)) &&
                  mfrc522.uid.uidByte[1] == int(eeprom.read(k+1)) &&
                  mfrc522.uid.uidByte[2] == int(eeprom.read(k+2)) &&
                  mfrc522.uid.uidByte[3] == int(eeprom.read(k+3))
              )
             { 
                  readed = false; 
                  lcd.clear(); lcd.setCursor(0,0);
                  lcd.print("Cardul exista"); lcd.setCursor(0,1);
                  lcd.print("in memorie");
                  delay(3000);
             }
           }
        }
      }while(!readed);
      readed = false;
      lcd.clear(); lcd.setCursor(0,0);
      lcd.print("Asteptati...");
      eeprom.write(idx_eeprom,mfrc522.uid.uidByte[0]);
      eeprom.write(idx_eeprom+1,mfrc522.uid.uidByte[1]);
      eeprom.write(idx_eeprom+2,mfrc522.uid.uidByte[2]);
      eeprom.write(idx_eeprom+3,mfrc522.uid.uidByte[3]);
      idx_eeprom += 4;

      delay(1000);
      tmp = 0;
      readpin:lcd.clear();
      lcd.print("Introduceti pin"); lcd.setCursor(0,1);
      while(1)
      {
        for(int j = 0; j < 4; j++) if(pin[j] != -1 && tmp) lcd.print(pin[j]);
        do
        {
          keyp = keypad.getKey();
        }while(!keyp);
        if(keyp  == '*' || keyp == '#' || keyp >= 'A')
        {
            lcd.clear(); lcd.setCursor(0,0);
            lcd.print("Doar cifre !");
            tmp = 1;
            delay(3000);
            goto readpin;
        }
        else
        {
          tmp = 0;
          pin[idx_eeprom%4] = keyp;
          eeprom.write(idx_eeprom,keyp);
          lcd.print(keyp);
          idx_eeprom += 1;
          if(idx_eeprom % 4 == 0) break; // Pin de maxim 4 cifre
        }
      }
   }
   for(int p = 0; p < idx_eeprom; p++)
   {
      if(p%8 == 0) Serial.println();
      Serial.print(eeprom.read(p));
      Serial.print(" ");
   }
   Serial.println();
   Serial.println(idx_eeprom);
}
int start_vot()
{
    lcd.clear();
    lcd.print("Votati ");
    Serial.println("Intru in loop");
    revote:do
    {
        keyp = keypad.getKey();
    }while(!keyp);
    Serial.println(keyp);
    if(keyp <= 'A' && keyp >= 'D') 
    {
        vote_error();
        goto revote;
    }
    else
    {
        switch(v_options-'0')
        {
            case 2:
            {
                Serial.println("Am intrat in switch 2");
                if(keyp == 'A' || keyp == 'B') return keyp - 'A';
                else
                {
                    vote_error();
                    goto revote;
                }
            }
            case 3:
            {
                Serial.println("Am intrat in switch 3");
                if(keyp == 'A' || keyp == 'B' || keyp == 'C') return keyp - 'A';
                else
                {
                    vote_error();
                    goto revote;
                }
            }
            case 4:
            {
              Serial.println("Am intrat in switch 4");
                if(keyp == 'A' || keyp == 'B' || keyp == 'C' || keyp == 'D') return keyp - 'A';
                else
                {
                    vote_error();
                    goto revote;
                }
            }
        }
    }
}
int verif_pin()
{
  bool readed = false;
  bool founded = false;
  int k,idx;
  do
  {
      readed = getID();
  }while(!readed);
  if(readed)
  {
          Serial.println();
          Serial.print(mfrc522.uid.uidByte[0]); Serial.print(" ");
          Serial.print(mfrc522.uid.uidByte[1]); Serial.print(" ");
          Serial.print(mfrc522.uid.uidByte[2]); Serial.print(" ");
          Serial.print(mfrc522.uid.uidByte[3]); Serial.print(" ");
          Serial.println();
          for(k = 0; k < idx_eeprom; k = k + 8)
          {
              Serial.println(k);
              if(mfrc522.uid.uidByte[0] == int(eeprom.read(k)) && mfrc522.uid.uidByte[1] == int(eeprom.read(k+1)) && mfrc522.uid.uidByte[2] == int(eeprom.read(k+2)) && mfrc522.uid.uidByte[3] == int(eeprom.read(k+3)))
              {
                  founded = true;
                  lcd.clear();
                  lcd.print("Introduceti pin"); lcd.setCursor(0,1);
                  idx = 0;
                  do
                  {
                      do
                      {
                          keyp = keypad.getKey();
                      }while(!keyp);
                      card_pin[idx] = keyp;
                      idx++;
                  }while(idx < 4);
                  if(card_pin[0] == int(eeprom.read(k+4)) && card_pin[1] == int(eeprom.read(k+5)) && card_pin[2] == int(eeprom.read(k+6)) && card_pin[3] == int(eeprom.read(k+7)))
                  {
                      Serial.print(card_pin[0]-'0');
                      Serial.print(card_pin[1]-'0');
                      Serial.print(card_pin[2]-'0');
                      Serial.print(card_pin[3]-'0');
                      for(int t = k; t < k+8; t++) eeprom.write(t,0); // Golesc memoria deoarece s-a votat deja cu acest card
                      for(int t = 0; t < idx_eeprom; t++)
                      {
                          if(t%8 == 0) Serial.println();
                          Serial.print(" ");Serial.print(eeprom.read(t));
                      }
                      c_options--; // O persoana a votat
                      return start_vot(); // Start procedura vot
                  }
                  else
                  {
                      lcd.print("Pin gresit");
                      delay(3000);
                      lcd.clear(); lcd.print("Scanati cardul");
                      return -1;
                  }    
              }
          }
          if(!founded)
          {
              lcd.clear();
              lcd.print("Card inexistent");
              delay(3000);
              lcd.clear();
              lcd.print("Scanati cardul");
              return -1;
          }
  }
}
void loop(){
    lcd.clear();
    lcd.print("Scanati cardul");
    int sum = c_options;
    int x;
    for(int i = 0; i < 4; i++) 
      if(i < v_options) votes[i] = 0;
      else votes[i] = -1;
    while(c_options)
    {
      Serial.println(int(c_options));
      x = verif_pin();
      if(x != -1)
      {
        votes[x]++;
        Serial.println("IDX VOT ");
        Serial.print(x);
      }
      lcd.clear();
      lcd.print("Scanati cardul");
    }
    Serial.println();
    Serial.print(votes[0]);Serial.print(" ");
    Serial.print(votes[1]);Serial.print(" ");
    Serial.print(votes[2]);Serial.print(" ");
    Serial.print(votes[3]);Serial.print(" ");
    lcd.clear();
    double vals[4];
    String line1,line2;
    char buff[8];
    vals[0] = (double)((double)votes[0]/(double)sum)*100;
    vals[1] = (double)((double)votes[1]/(double)sum)*100;
    vals[2] = (double)((double)votes[2]/(double)sum)*100;
    vals[3] = (double)((double)votes[3]/(double)sum)*100;
    Serial.println(); Serial.println(); Serial.println();
    for(int i = 0; i < 4; i++)
    {
       Serial.print(vals[i]);Serial.print(" ");
    }
    Serial.println();
    line1 = "A:";
    line2 = "C:";
    dtostrf(vals[0],5,1,buff);
    Serial.println(buff);
    line1 = line1 + buff;
    dtostrf(vals[1],5,1,buff);
    Serial.println(buff);
    line1 = line1 + "%B:" + buff + "%";
    dtostrf(vals[2],5,1,buff);
    Serial.println(buff);
    line2 = line2 + buff;
    dtostrf(vals[3],5,1,buff);
    Serial.println(buff);
    line2 = line2 + "%D:" + buff + "%";
    lcd.clear();
    lcd.print(line1);lcd.setCursor(0,1);
    lcd.print(line2);
    Serial.println(line1);
    Serial.println(line2);
    while(1){};
}
